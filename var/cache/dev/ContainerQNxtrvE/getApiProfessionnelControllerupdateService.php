<?php

namespace ContainerQNxtrvE;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getApiProfessionnelControllerupdateService extends App_KernelDevDebugContainer
{
    /**
     * Gets the private '.service_locator.W0UbLH2.App\Controller\Apis\ApiProfessionnelController::update()' shared service.
     *
     * @return \Symfony\Component\DependencyInjection\ServiceLocator
     */
    public static function do($container, $lazyLoad = true)
    {
        return $container->privates['.service_locator.W0UbLH2.App\\Controller\\Apis\\ApiProfessionnelController::update()'] = (new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'situationProfessionnelleRepository' => ['privates', 'App\\Repository\\SituationProfessionnelleRepository', 'getSituationProfessionnelleRepositoryService', true],
            'regionRepository' => ['privates', 'App\\Repository\\RegionRepository', 'getRegionRepositoryService', true],
            'districtRepository' => ['privates', 'App\\Repository\\DistrictRepository', 'getDistrictRepositoryService', true],
            'communeRepository' => ['privates', 'App\\Repository\\CommuneRepository', 'getCommuneRepositoryService', true],
            'villeRepository' => ['privates', 'App\\Repository\\VilleRepository', 'getVilleRepositoryService', true],
            'paysRepository' => ['privates', 'App\\Repository\\PaysRepository', 'getPaysRepositoryService', true],
            'civiliteRepository' => ['privates', 'App\\Repository\\CiviliteRepository', 'getCiviliteRepositoryService', true],
            'professionnel' => ['privates', '.errored..service_locator.W0UbLH2.App\\Entity\\Professionnel', NULL, 'Cannot autowire service ".service_locator.W0UbLH2": it needs an instance of "App\\Entity\\Professionnel" but this type has been excluded in "config/services.yaml".'],
            'specialiteRepository' => ['privates', 'App\\Repository\\SpecialiteRepository', 'getSpecialiteRepositoryService', true],
            'genreRepository' => ['privates', 'App\\Repository\\GenreRepository', 'getGenreRepositoryService', true],
            'professionnelRepository' => ['privates', 'App\\Repository\\ProfessionnelRepository', 'getProfessionnelRepositoryService', true],
            'organisationRepository' => ['privates', 'App\\Repository\\OrganisationRepository', 'getOrganisationRepositoryService', true],
            'lieuDiplomeRepository' => ['privates', 'App\\Repository\\LieuDiplomeRepository', 'getLieuDiplomeRepositoryService', true],
            'typeDiplomeRepository' => ['privates', 'App\\Repository\\TypeDiplomeRepository', 'getTypeDiplomeRepositoryService', true],
            'statusProRepository' => ['privates', 'App\\Repository\\StatusProRepository', 'getStatusProRepositoryService', true],
        ], [
            'situationProfessionnelleRepository' => 'App\\Repository\\SituationProfessionnelleRepository',
            'regionRepository' => 'App\\Repository\\RegionRepository',
            'districtRepository' => 'App\\Repository\\DistrictRepository',
            'communeRepository' => 'App\\Repository\\CommuneRepository',
            'villeRepository' => 'App\\Repository\\VilleRepository',
            'paysRepository' => 'App\\Repository\\PaysRepository',
            'civiliteRepository' => 'App\\Repository\\CiviliteRepository',
            'professionnel' => 'App\\Entity\\Professionnel',
            'specialiteRepository' => 'App\\Repository\\SpecialiteRepository',
            'genreRepository' => 'App\\Repository\\GenreRepository',
            'professionnelRepository' => 'App\\Repository\\ProfessionnelRepository',
            'organisationRepository' => 'App\\Repository\\OrganisationRepository',
            'lieuDiplomeRepository' => 'App\\Repository\\LieuDiplomeRepository',
            'typeDiplomeRepository' => 'App\\Repository\\TypeDiplomeRepository',
            'statusProRepository' => 'App\\Repository\\StatusProRepository',
        ]))->withContext('App\\Controller\\Apis\\ApiProfessionnelController::update()', $container);
    }
}
