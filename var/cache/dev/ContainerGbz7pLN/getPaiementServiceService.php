<?php

namespace ContainerGbz7pLN;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getPaiementServiceService extends App_KernelDevDebugContainer
{
    /**
     * Gets the private 'App\Service\PaiementService' shared autowired service.
     *
     * @return \App\Service\PaiementService
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/src/Controller/FileTrait.php';
        include_once \dirname(__DIR__, 4).'/src/Service/PaiementService.php';

        $a = ($container->services['doctrine.orm.default_entity_manager'] ?? self::getDoctrine_Orm_DefaultEntityManagerService($container));

        if (isset($container->privates['App\\Service\\PaiementService'])) {
            return $container->privates['App\\Service\\PaiementService'];
        }
        $b = ($container->privates['debug.validator'] ?? self::getDebug_ValidatorService($container));

        if (isset($container->privates['App\\Service\\PaiementService'])) {
            return $container->privates['App\\Service\\PaiementService'];
        }
        $c = ($container->privates['App\\Service\\SendMailService'] ?? $container->load('getSendMailServiceService'));

        if (isset($container->privates['App\\Service\\PaiementService'])) {
            return $container->privates['App\\Service\\PaiementService'];
        }

        return $container->privates['App\\Service\\PaiementService'] = new \App\Service\PaiementService(($container->privates['App\\Repository\\TransactionRepository'] ?? $container->load('getTransactionRepositoryService')), ($container->privates['.debug.http_client'] ?? self::get_Debug_HttpClientService($container)), $a, ($container->privates['parameter_bag'] ??= new \Symfony\Component\DependencyInjection\ParameterBag\ContainerBag($container)), ($container->privates['App\\Service\\Utils'] ?? $container->load('getUtilsService')), $b, ($container->services['router'] ?? self::getRouterService($container)), ($container->privates['App\\Repository\\CiviliteRepository'] ?? $container->load('getCiviliteRepositoryService')), ($container->privates['App\\Repository\\GenreRepository'] ?? $container->load('getGenreRepositoryService')), ($container->privates['App\\Repository\\SpecialiteRepository'] ?? $container->load('getSpecialiteRepositoryService')), ($container->privates['App\\Repository\\TempProfessionnelRepository'] ?? $container->load('getTempProfessionnelRepositoryService')), ($container->privates['App\\Repository\\SituationProfessionnelleRepository'] ?? $container->load('getSituationProfessionnelleRepositoryService')), ($container->privates['App\\Repository\\TempEtablissementRepository'] ?? $container->load('getTempEtablissementRepositoryService')), ($container->privates['App\\Repository\\TypePersonneRepository'] ?? $container->load('getTypePersonneRepositoryService')), ($container->privates['App\\Repository\\NiveauInterventionRepository'] ?? $container->load('getNiveauInterventionRepositoryService')), ($container->privates['App\\Repository\\VilleRepository'] ?? $container->load('getVilleRepositoryService')), $c, ($container->privates['App\\Repository\\PaysRepository'] ?? $container->load('getPaysRepositoryService')), ($container->privates['security.user_password_hasher'] ?? $container->load('getSecurity_UserPasswordHasherService')), ($container->privates['App\\Repository\\RegionRepository'] ?? $container->load('getRegionRepositoryService')), ($container->privates['App\\Repository\\DistrictRepository'] ?? $container->load('getDistrictRepositoryService')), ($container->privates['App\\Repository\\CommuneRepository'] ?? $container->load('getCommuneRepositoryService')), ($container->privates['App\\Repository\\UserRepository'] ?? $container->load('getUserRepositoryService')), ($container->privates['App\\Repository\\ProfessionRepository'] ?? $container->load('getProfessionRepositoryService')), ($container->privates['App\\Repository\\StatusProRepository'] ?? $container->load('getStatusProRepositoryService')), ($container->privates['App\\Repository\\TypeDiplomeRepository'] ?? $container->load('getTypeDiplomeRepositoryService')), ($container->privates['App\\Repository\\LieuDiplomeRepository'] ?? $container->load('getLieuDiplomeRepositoryService')), ($container->privates['App\\Repository\\DocumentOepTempRepository'] ?? $container->load('getDocumentOepTempRepositoryService')), ($container->privates['App\\Repository\\DocumentRepository'] ?? $container->load('getDocumentRepositoryService')), ($container->privates['App\\Repository\\DocumentOepRepository'] ?? $container->load('getDocumentOepRepositoryService')), ($container->privates['App\\Repository\\EtablissementRepository'] ?? $container->load('getEtablissementRepositoryService')));
    }
}
